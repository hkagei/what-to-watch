{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchMovies.js","utils/API.js","utils/queries.js","pages/SavedMovies.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeMovieId","movieId","savedMovieIds","JSON","parse","updatedSavedMovieIds","filter","savedMovieId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_MOVIE","REMOVE_MOVIE","SearchMovies","useState","searchedMovies","setSearchedMovies","searchInput","setSearchInput","useMutation","saveMovie","error","setSavedMovieIds","useEffect","movieIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","results","movieData","map","movie","id","title","original_title","genre","genre_ids","description","overview","image","poster_path","releaseDate","release_date","rating","vote_average","console","log","handleSaveMovie","movieToSave","find","Auth","loggedIn","variables","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","QUERY_ME","SavedMovies","removeMovie","useQuery","loading","userData","me","handleDeleteMovie","Object","keys","savedMovies","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcce4002.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedMovieIds = () => {\n  const savedMovieIds = localStorage.getItem('saved_movies')\n    ? JSON.parse(localStorage.getItem('saved_movies'))\n    : [];\n\n  return savedMovieIds;\n};\n\nexport const saveMovieIds = (movieIdArr) => {\n  if (movieIdArr.length) {\n    localStorage.setItem('saved_movies', JSON.stringify(movieIdArr));\n  } else {\n    localStorage.removeItem('saved_movies');\n  }\n};\n\nexport const removeMovieId = (movieId) => {\n  const savedMovieIds = localStorage.getItem('saved_movies')\n    ? JSON.parse(localStorage.getItem('saved_movies'))\n    : null;\n\n  if (!savedMovieIds) {\n    return false;\n  }\n\n  const updatedSavedMovieIds = savedMovieIds?.filter((savedMovieId) => savedMovieId !== movieId);\n  localStorage.setItem('saved_movies', JSON.stringify(updatedSavedMovieIds));\n\n  return true;\n};\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_MOVIE = gql`\n    mutation saveMovie($movieData: movieInput) {\n        saveMovie(movieData: $movieData) {\n            _id\n            username\n            email\n            savedMovies {\n              movieId\n              title\n              description\n              image\n              releaseDate\n              rating\n            }\n        }\n    }\n`;\n\nexport const REMOVE_MOVIE = gql`\nmutation removeMovie($movieId: ID!) {\n    removeMovie(movieId: $movieId) {\n        _id\n        username\n        email\n        savedMovies {\n          movieId\n            title\n            description\n            image\n            releaseDate\n            rating\n        }\n    }\n}\n`;\n\n\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\n// remove saveMovie from Utils API \nimport { searchMovies } from '../utils/API';\nimport { saveMovieIds, getSavedMovieIds } from '../utils/localStorage';\nimport { useMutation } from '@apollo/client';\nimport { SAVE_MOVIE } from '../utils/mutations';\n\n\nconst SearchMovies = () => {\n  // create state for holding returned google api data\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n  const [saveMovie, {error}] = useMutation(SAVE_MOVIE);\n  // create state to hold saved MovieId values\n  const [savedMovieIds, setSavedMovieIds] = useState(getSavedMovieIds());\n\n  // set up useEffect hook to save `savedMovieIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveMovieIds(savedMovieIds);\n  });\n\n  // create method to search for Movies and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchMovies(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { results } = await response.json();\n\n      const movieData = results.map((movie) => ({\n        movieId: movie.id,\n        title: movie.original_title,\n        genre: movie.genre_ids.id,\n        description: movie.overview,\n        image: movie.poster_path || '',\n        releaseDate: movie.release_date,\n        rating: movie.vote_average\n      }));\n\n      console.log(movieData)\n\n      setSearchedMovies(movieData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a movie to our database\n  const handleSaveMovie = async (movieId) => {\n    // find the movie in `searchedMovies` state by the matching id\n    const movieToSave = searchedMovies.find((movie) => movie.movieId === movieId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const{data} = await saveMovie({variables: {movieData: {...movieToSave}}});\n      // const response = await saveMovie(movieToSave, token);\n\n      // if (!response) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // if movie successfully saves to user's account, save movie id to state\n      setSavedMovieIds([...savedMovieIds, movieToSave.movieId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Movies!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a movie'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedMovies.length\n            ? `Viewing ${searchedMovies.length} results:`\n            : 'Search for a movie to begin'}\n        </h2>\n        <CardColumns>\n          {searchedMovies.map((movie) => {\n            return (\n              <Card key={movie.movieId} border='dark'>\n                {movie.image ? (\n                  <Card.Img src={\"https://image.tmdb.org/t/p/w500/\" + movie.image} alt={`The cover for ${movie.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{movie.title}</Card.Title>\n                  <Card.Text>{movie.description}</Card.Text>\n                  <Card.Text>Release Date: {movie.releaseDate}</Card.Text>\n                  <Card.Text>Rating: {movie.rating}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedMovieIds?.some((savedMovieId) => savedMovieId === movie.movieId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveMovie(movie.movieId)}>\n                      {savedMovieIds?.some((savedMovieId) => savedMovieId === movie.movieId)\n                        ? 'This movie has already been saved!'\n                        : 'Save this movie!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchMovies;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save movie data for a logged in user\nexport const saveMovie = (movieData, token) => {\n  return fetch('/api/users/movies', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(movieData),\n  });\n};\n\n// remove saved movie data for a logged in user\nexport const deleteMovie = (movieId, token) => {\n  return fetch(`/api/users/movies/${movieId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n\n\nexport const searchMovies = (query) => {\n  return fetch(`https://api.themoviedb.org/3/search/movie?api_key=06439846ed9757bb6b3c2ed866d66876&query=${query}`);\n};\n\n// https://.themoviedb.org/3/movie/550?api_key=06439846ed9757bb6b3c2ed866d66876api","import { gql } from \"@apollo/client\";\n\nexport const QUERY_ME = gql`\n{\n    me {\n        _id\n        username\n        email\n        savedMovies{\n            movieId\n            title\n            description\n            image\n            releaseDate\n            rating\n        }\n\n    }\n}\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\n//import { deleteMovie } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeMovieId } from '../utils/localStorage';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_ME } from '../utils/queries';\nimport { REMOVE_MOVIE } from '../utils/mutations';\n\nconst SavedMovies = () => {\n  //const [userData, setUserData] = useState({});\n  const [removeMovie, {error}] = useMutation(REMOVE_MOVIE);\n  const { loading, data } = useQuery(QUERY_ME);\n  const userData = data?.me || {};\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  // useEffect(() => {\n  //   const getUserData = async () => {\n  //     try {\n  //       const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n  //       if (!token) {\n  //         return false;\n  //       }\n\n  //       const response = await getMe(token);\n\n  //       if (!response.ok) {\n  //         throw new Error('something went wrong!');\n  //       }\n\n  //       const user = await response.json();\n  //       setUserData(user);\n  //     } catch (err) {\n  //       console.error(err);\n  //     }\n  //   };\n\n  //   getUserData();\n  // }, [userDataLength]);\n\n  // create function that accepts the Movie's mongo _id value as param and deletes the Movie from the database\n  const handleDeleteMovie = async (movieId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeMovie({\n        variables: { movieId }\n      });\n      // const response = await deleteMovie(movieId, token);\n\n      // if (!response.ok) {\n      //   throw new Error('something went wrong!');\n      // }\n\n      // const updatedUser = await response.json();\n      // setUserData(updatedUser);\n      // upon success, remove movie's id from localStorage\n      removeMovieId(movieId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved movies!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedMovies.length\n            ? `Viewing ${userData.savedMovies.length} saved ${userData.savedMovies.length === 1 ? 'movie' : 'movies'}:`\n            : 'You have no saved movies!'}\n        </h2>\n        <CardColumns>\n          {userData.savedMovies.map((movie) => {\n            return (\n              <Card key={movie.movieId} border='dark'>\n                {movie.image ? (\n                  <Card.Img src={\"https://image.tmdb.org/t/p/w500/\" + movie.image} alt={`The cover for ${movie.title}`} variant='top' />\n                ) : null}                <Card.Body>\n                  <Card.Title>{movie.title}</Card.Title>\n                  <Card.Text>{movie.genre_ids}</Card.Text>\n                  <Card.Text>{movie.description}</Card.Text>\n                  <Card.Text>Release Date: {movie.releaseDate}</Card.Text>\n                  <Card.Text>Rating: {movie.rating}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteMovie(movie.movieId)}>\n                    Delete this movie!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedMovies;","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser, {error}] = useMutation(ADD_USER);\n\n  //accept changes in input boxes\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  // Trigger an alert if there is an error\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false)\n    }\n  }, [error]);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData }\n      });\n\n      console.log(data);\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState,useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER, } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, {error}] = useMutation(LOGIN_USER);\n\n  // show an alert if there is an error\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false)\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData }\n      });\n      \n      console.log(data);\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Find Movies\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Movies\n              </Nav.Link>\n              {/* if user is logged in show saved movies and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Saved Movies\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchMovies from './pages/SearchMovies';\nimport SavedMovies from './pages/SavedMovies';\nimport Navbar from './components/Navbar';\nimport { ApolloClient, InMemoryCache, ApolloProvider, createHttpLink } from '@apollo/client'\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n})\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchMovies} />\n            <Route exact path='/saved' component={SavedMovies} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}